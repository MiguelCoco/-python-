                                                            利用PYTHON进行数据分析
PYTHON库
    Numpy（Numerical Python）（提供快速的数组处理能力，为算法之间传递数据的容器）
        
        快速高效的多维数组对象ndarray
        
        用于对数执行元素级计算以及直接对数组执行数学运算的函数
        
        用于读写硬盘上基于数组的数据集的工具
        
        线性代数运算、傅里叶变换、随机数生成
        
        用于将C、C++、Fortran代码集成到Python的工具
    
    Pandas（Python data analysis），（提供处理结构化数据的数据结构和函数）：
        
        有灵活的数据处理功能
        
        提供索引功能，更便捷完成重塑、切片和切块、聚合、选取数据子集等操作
        
        提供大量适用于金融数据的时间序列功能和工具
        
    matplotlib（绘制图表）
        
        提供好用的交互式数据绘图环境
        
        绘制数据图表，图表也是交互式的
        
    IPython(工具集组成部分）
        
        增强的python shell 提高编写、测试、调试python代码的速度
        
        Html笔记本
        
        GUI控制台
        
        用于交互式并行和分布式计算的基础框架
        
    Scipy(解决科学计算中各种标准问题域的包的集合）
    
        scipy.integrate:数值积分例程和微分方程求解器
        
        scipy.linalg:扩展了线性代数例程和矩阵分解功能
        
        scipy.optimize:函数优化器（最小化器）以及根查找算法
        
        scipy.signal:信号处理工具
        
        scipy.sparse:稀疏矩阵和稀疏线性系统求解器
        
        scipy.special:SPECFUN（是一个实现许多常用数学函数的Fortran库）的包装器
        
        scipy.stats:标准连续和离散概率分布（如密度函数、采样器、连续分布函数等）、各种统计检验方法、更好的面熟统计法
        
        scipy.weave:利用内联C++代码加速数组计算的工具
      


IPython:一种交互式计算和开发环境
    IPthon基础
        命令行启动 WIN + R CMD  ipython
    Tab键自动补全
        在shell中输入表达式时，按下Tab键，当前命名空间中任何与已输入的字符串相匹配的变量（对象、函数等）就会被找出来
        
        输入句点“.”自动完成方法和属性的输入
        
        自动完成模块
        
        自动完成路径
        
        自动完成函数关键字参数
        
    内省
        在变量/函数的前面或后面加上一个问号（？）就可以将有关该对象的通用信息显示出来
        
        使用??显示源代码
        
        ？搜索IPython命名空间

    
    %run命令运行.py文件
        %run my_test.py
     
    ctrl + C 中断正在运行的程序
        ctrl + C引发一个Keyboardinterrupt
        
    执行剪贴板中的代码
        linux  ctrl+shift+v粘贴
        windows 右键粘贴
        注意！IPython粘贴模式是在IPython中逐行输入代码，换行符会被处理为<return>，如果你粘贴有空行的代码，IPython会认为在空行处结束缩进，引出IndentionError

        %paste 承载剪贴板中的一切文本
        
        %cpaste 承载剪贴板中的一切文本，提供提示符，可以连续粘贴并修改代码片段，ctrl+c可终止粘贴
        
    键盘上的快捷键
        Ctrl + p 向上搜索历史文本
        Ctrl + n 向下搜索历史文本
        Ctrl + a 移动光标到行首
        Ctrl + e 移动光标到行尾
        Ctrl + f 向前移动一个字符
        Ctrl + b 向后移动一个字符
        Ctrl + k 删除光标开始到行尾字符
        Ctrl + u 删除光标开始到行首字符
        Ctrl + l 清屏
        
    异常和跟踪
        %run出现错误时，ipython会输出整个调用占和跟踪（traceback）,并附上上下文代码，上下文代码数量可以通过%xmode魔术命令进行控制
    
    魔术命令
        IPython有一些特殊命令被称为魔术命令，魔术命令是以百分号%为前缀的命令,如：执行时间命令 %timeit
        魔术命令可以看做是命令行程序，大都有一些命令行选项，使用？可以查看其选项
        魔术命令默认是可以不带%使用的，只要没有定义与其同名的变量即可，这个技术叫做automagic,可以通过%automagic打开或关闭
        常用的魔术命令
            %quickref 显示IPython的快速参考
            %magic 显示所有魔术命令的详细文档
            %debug 从最新的异常跟踪的底部进入交互式调试器
            %hist 打印命令的输入历史
            %pdb 在异常发生后自动进入调试器
            %paste 执行剪贴板的python代码
            %cpaste 打开特殊提示符以便手工粘贴待执行的代码
            %reset 删除interactive命名空间中的全部变量/名称
            %page OBJECT 通过分页器打印输出OBJECT
            %run 运行一个python脚本
            %time statement 报告statement的执行时间
            %timeit statement 多次执行statement以计算系综平均执行时间，对那些执行时间非常小的代码很有用
            %who %who_is %whos 显示interactive命名空间中定义的变量，信息级别/冗余度可变
            %xdel variable 删除variable,并尝试清楚其在ipython中的对象的一切引用
          
    基于QT的富GUI控制台
        python3.6可以安装pyqt5
        Qt控制台可以通过标签页的形式启动多个IPython进程，可以让你在多个任务之间轻松切换
        
  
    matplotlib集成与pylab模式
        IPython能和matplotlib这样的库和GUI工具集默契配合，标准python shell不能，所以ipython广泛用于科学计算领域
        

    搜索并使用历史命令
    
    输入和输出变量
        输出
            IPython会将输入和输出的引用保存在一些特殊变量中，最近的两个输出结果会保存在“_”和“__”变量中
        输入
            输入的文本会被保存在名为_iX的变量中，其中X是输入行的行号。输入变量对应的输出变量_X
            In [26]: foo = 'bar'
            
            In [27]: foo
            Out[27]: 'bar'
            
            In [28]:_i27
            Out[28]:u'foo'
            
            In [29]:_27
            Out[29]: 'bar'
           由于输入变量是字符串，因此可以用python的exec关键字重新执行：
           In [30]: exec _i27
           Out[30]: 'bar'
 
    记录输入和输出
        IPython能够记录整个控制台会话，包括输入和输出。执行%logstart即可开始记录日志：
       
        %logstart  %logoff  %logon  %lofstate %logstop查看相关文档
       
       
    与操作系统交互
        IPython跟操作系统的标准shell结合紧密，可以直接在IPython中实现标准的windows或unix命令行活动
        
        跟系统相关的IPython魔术命令
        
            !cmd                    在系统shell中执行cmd
            output=!cmd args        执行cmd,并将stdout存放在output中
            %alias alias_name cmd   为系统shell命令定义别名
            %bookmark               使用IPython的目录书签系统
            %cd directory           将系统工作目录改为directory
            %pwd                    返回系统的当前目录
            %pushd directory        将当前目录入栈，并转向目标目录
            %popd                   弹出栈顶目录，并转向该目录
            %dir                    返回一个含有当前目录栈的列表
            %dhist                  打印目录访问历史
            %env                    以dict形式返回系统环境变量
        
    shell命令和别名
        在IPython中，以感叹号（!）开头的命令行表示其后的内容需要在系统shell中执行
          
        在ipython中启动python解释器
            In [1]：!python
        可以将shell命令的控制台输出存放在变量中
            linux系统下ip命令
            ip_info = !ifconfig etho | grep "inet"
            ip_info[0].strip()
            
       %alias可以为shell命令自定义简称
          %alias alias_name origin_name
          eg:%alias py python
          
          可以一次执行多条命令，只需将它们写在一行上并以分号隔开即可：
              %alias test ( cd xx; dir xxx)
              
    目录书签系统
        %bookmark db /home/wesm/Dropbox/
        cd db
        %bookmark -l 列出所有书签
        
    交互式调试器          
        IPython的调试器增强了pdb
        调试代码的最佳时机是错误刚刚发生时，%debug命令在发生异常之后马上输入将会调试那个事后调试器，并直接跳到引发异常的那个栈帧（stack frame）
        %debug
        ipdb>u/d 
        u错误级别上升，d错误级别下降
        
        ipython调试器命令
            h(help)             显示命令列表
            help command        显示command的文档
            c(continue)         恢复程序的执行
            q(quit)             退出调试器，不在执行任何代码
            b(break)number      在当前文件的第number行设置断点
            s(tep)              单步进入函数调用
            n(ext)              执行当前行，并前进到当前级别的下一行
            a(rgs)              显示当前函数的参数
            .
            .
            .
            
     测试代码的执行时间：%time和%timeit
        %time函数，执行一次的时间
        %timeit函数，执行时间的平均值
       
     基本性能分析：%run和%run -p
        cProfile在执行一个程序或代码块时，会记录各函数所耗费的时间
            python -m cProfile -s xxxx.py
        %prun 格式和cProfile差不多，它分析的是python语句而不是整个.py文件
            %prun -l 7 -s cumulative xxxxxxxxxx
        %run -p -s cumulative xxxx.py
    
    IPython HTML Notebook
        jupyter notebook
    
    IPython个性化和配置（ipython_config.py中）
        修改颜色方案
        修改输入输出提示符
        去掉out提示符跟下一个In提示符之间的空行
        执行任意python语句
        启用IPython扩展，如line_profiler中的魔术命令%lprun
        定义自己的魔术或系统命名
        
        
   



